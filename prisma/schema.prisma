generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String            @id
  name        String
  email       String            @unique
  image       String
  cart        Json              @default("{}")
  isMember    Boolean           @default(false)
  password    String?
  role        String            @default("user")
  addresses   Address[]
  buyerOrders Order[]           @relation("BuyerRelation")
  sellerOrders Order[]          @relation("SellerRelation")
  templates   ProductTemplate[]
  ratings     Rating[]
  store       Store?
  sales       Sale[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  logo        String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String
  mrp             Float
  price           Float
  images          String[]
  video           String?
  category        String
  inStock         Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  brandId         String?
  caseMaterial    String?
  caseSize        String?
  collection      String?
  gender          String?
  mechanism       String?
  stock           Int         @default(0)
  rating          Float?      @default(0)
  strapMaterial   String?
  waterResistance String?
  spec            Json?
  orderItems      OrderItem[]
  saleItems       SaleItem[]
  brand           Brand?      @relation(fields: [brandId], references: [id])
  ratings         Rating[]
}

model Order {
  id                  String          @id @default(cuid())
  total               Float
  status              OrderStatus     @default(ORDER_PLACED)
  userId              String
  sellerId            String?
  addressId           String
  isPaid              Boolean         @default(false)
  paymentMethod       PaymentMethod
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  isCouponUsed        Boolean         @default(false)
  coupon              Json            @default("{}")
  estimatedDrop       String?
  orderNumber         String          @unique
  pickupAddressId     String?
  pickupDate          DateTime?
  returnAvailableTime String?
  trackingStatus      TrackingStatus? @default(ORDER_RECEIVED)
  address             Address         @relation("OrderAddressRelation", fields: [addressId], references: [id])
  pickupAddress       Address?        @relation("PickupAddressRelation", fields: [pickupAddressId], references: [id])
  user                User            @relation("BuyerRelation", fields: [userId], references: [id])
  seller              User?           @relation("SellerRelation", fields: [sellerId], references: [id])
  orderItems          OrderItem[]
  trackingUpdates     OrderTracking[]
}

model OrderTracking {
  id        String         @id @default(cuid())
  orderId   String
  status    TrackingStatus
  date      DateTime
  location  String?
  notes     String?
  createdAt DateTime       @default(now())
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int
  review    String
  userId    String
  productId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, orderId])
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  name         String
  email        String
  street       String
  city         String
  state        String
  zip          String
  country      String
  phone        String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]  @relation("OrderAddressRelation")
  pickupOrders Order[]  @relation("PickupAddressRelation")
}

model Coupon {
  code        String   @id
  description String
  discount    Float
  forNewUser  Boolean
  forMember   Boolean  @default(false)
  isPublic    Boolean
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Store {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  description String
  username    String   @unique
  address     String
  status      String   @default("pending")
  isActive    Boolean  @default(false)
  logo        String
  email       String
  contact     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model ProductTemplate {
  id              String   @id @default(cuid())
  name            String
  userId          String
  collection      String?
  mechanism       String?
  gender          String?
  caseSize        String?
  caseMaterial    String?
  strapMaterial   String?
  waterResistance String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  ORDER_PLACED
  PROCESSING
  IN_TRANSIT
  ON_SORTING_CENTER
  ON_THE_WAY
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  COD
  STRIPE
  PAYPAL
  BANK_TRANSFER
  WALLET
}

enum TrackingStatus {
  ORDER_RECEIVED
  IN_TRANSIT
  ON_SORTING_CENTER
  ON_THE_WAY
  DELIVERED
}

model Sale {
  id        String     @id @default(cuid())
  sellerId  String
  total     Float
  createdAt DateTime   @default(now())
  seller    User       @relation(fields: [sellerId], references: [id])
  saleItems SaleItem[]
}

model SaleItem {
  saleId    String
  productId String
  quantity  Int
  price     Float
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([saleId, productId])
}
